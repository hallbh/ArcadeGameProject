package GameObjects;

import java.awt.geom.Area;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.util.ArrayList;

public class Player extends GameObject {
	
	private boolean isMoving;
	private boolean canPlaceBomb;
	private int direction; //1 = left, 2 = right, 3 = up, 4 = down 
	//arraylist of powerups
	private double speed;
	private GameObject[][] map;
	private Bomb[][] bombMap;
	private int bombCap;
	private ArrayList<Bomb> bombs;
	private boolean isColliding;
	
	public Player(int x, int y, GameObject[][] map, Bomb[][] bombMap) {
		super(x, y, 30);
		this.hitbox = new Rectangle2D.Double(this.x + 2, this.y + 2, 28, 28);
		this.area = new Area(this.hitbox);
		this.direction = 2;
		this.speed = 1;
		this.map = map;
		this.bombCap = 1000;
		this.bombs = new ArrayList<Bomb>();
		this.bombMap = bombMap;
		this.isColliding = false;
		this.sprite = new File("Sprites/SANIC.png");

	}
	
	@Override
	public void run(){
		try{
			while(this.threadRun){
				GameObject closest = this.nearestObject();
				if(this.area.intersects(closest.getHitBox())){
					this.collide(closest);
				}
				if(this.bombs.size() > 0){//check if colliding with a bomb
					closest = this.nearestBomb();
					if(this.area.intersects(closest.getHitBox())){
						this.collide(closest);
					}
				}
				Thread.sleep(this.frameTime);
				if(this.isMoving && !this.isColliding){
					switch(this.direction){
						case 1:
							this.x -= this.speed;
						break;
						case 2:
							this.x += this.speed;
						break;
						case 3:
							this.y -= this.speed;
						break;
						case 4:
							this.y += this.speed;
						break;
						default:
						break;
					}
				}
				this.update();
			}
		}
		catch(InterruptedException e){
			//nothing to do
		}
		finally{
			//nothing to do
		}
	}
	
	public void moveX(int dist){
		this.x += dist;
	}
	public void moveY(int dist){
		this.y += dist;
	}
	
	@Override
	public void update(){
		this.center = new Point2D.Double(this.x + 16, this.y + 16);
		this.hitbox = new Rectangle2D.Double(this.x + 2, this.y + 2, 28, 28);
		this.area = new Area(this.hitbox);
	}
	
	public Bomb placeBomb(){
		if(this.bombs.size() < this.bombCap){
			Point2D grid = this.convertToGrid();
			Point2D bombPoint = new Point2D.Double((grid.getX() * 32), (grid.getY() * 32));
			Bomb bomb = new Bomb((int)bombPoint.getX(), (int)bombPoint.getY(), this);
			this.bombs.add(bomb);
			return bomb;
		}	
		return null;
	}
	
	public GameObject nearestObject(){
		GameObject closest = null;
		double nearestDistance = Double.MAX_VALUE;
		for(int i = 0; i < 13; i++){
			for(int j = 0; j < 29; j++){
				if(this.map[i][j] != null && this.map[i][j] != this){
					double distance = this.center.distance(this.map[i][j].getCenterPoint());
					if(distance < nearestDistance){
						nearestDistance = distance;
						closest = this.map[i][j];
					}
				}	
			}
		}
		return closest;
	}
	
	public Bomb nearestBomb(){
		Bomb closest = null;
		double nearestDistance = Double.MAX_VALUE;
		for(int i = 0; i < 13; i++){
			for(int j = 0; j < 29; j++){
				if(this.bombMap[i][j] != null){
					double distance = this.center.distance(this.bombMap[i][j].getCenterPoint());
					if(distance < nearestDistance){
						nearestDistance = distance;
						closest = this.bombMap[i][j];
					}
				}
			}
		}
		return closest;
	}

	@Override
	public void collide(GameObject obj) {
		obj.collideWithPlayer(this);
	}
	
	public void stopMoving() {
		this.isMoving = !this.isMoving;
	}
	
	public void startMoving(int direction) {
		this.isMoving = true;
		this.direction = direction;
	}
	public int getDirection(){
		return this.direction;
	}
	
	public void setSpeed(double speed){
		this.speed = speed;
	}

	@Override
	public void collideWithBrick(Brick brick) {
		// TODO Auto-generated method stub.
		
	}

	@Override
	public void collideWithWall(Wall wall) {
		// TODO Auto-generated method stub.
		
	}

	@Override
	public void collideWithPlayer(Player player) {
		// TODO Auto-generated method stub.
		
	}

	@Override
	public void collideWithBomb(Bomb bomb) {
		// TODO Auto-generated method stub.
		
	}

}
