import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import javax.swing.JComponent;

import GameObjects.Brick;
import GameObjects.GameObject;
import GameObjects.Player;
import GameObjects.Wall;

public class LevelPanel extends JComponent {
	
	public static final int WIDTH = 944;
	public static final int HEIGHT = 460;
	private File level;
	private GameObject[][] map;
	private int levelNum;
	private final Color BACKGROUND_COLOR = new Color(16,120,48);
	private Thread repainterThread;

	public LevelPanel() {
		this.levelNum = 1;
		this.level = new File("Levels/level1.txt");
		this.map = new GameObject[14][39];
		
		this.generateLevel();
		
		Runnable r = new Repainter(30);
		this.repainterThread = new Thread(r);
		this.repainterThread.start();
	}
	
	public LevelPanel(int level){
		this.levelNum = level;
		this.level = new File("Levels/level" + level + ".txt");
		this.map = new GameObject[14][39];
		
		this.generateLevel();
		
		Runnable r = new Repainter(30);
		this.repainterThread = new Thread(r);
		this.repainterThread.start();
	}
	
	private void generateLevel(){
		int x = 0;
		int y = 0;
		Scanner scan = null;
		try {
			scan = new Scanner(this.level);
			for(int i = 0; i < 13; i++){
				x = 0;
				String temp = scan.nextLine();
				for(int j = 0; j < 29; j++){
					char curr = temp.charAt(j);
					switch(curr){
						case 'f': this.map[i][j] = null;
								  x += 32;
							break;
						case '#': this.map[i][j] = new Wall(x, y);
								  x += 32;
							break;
						case '@': this.map[i][j] = new Player(x, y, map);
								  x += 32;
							break;
						case 'b': this.map[i][j] = new Brick(false, false, x, y);
								  x += 32;
							break;
						case 'd': this.map[i][j] = new Brick(true, false, x, y);
								  x += 32;
							break;
						case 'p': this.map[i][j] = new Brick(false, true, x, y);
						  		  x += 32;
							break;
						default:  this.map[i][j] = null;
								  x += 32;
							break;
					}
				}
				y += 32;
			}
		} catch (FileNotFoundException exception) {
			exception.printStackTrace();
		} finally {
			scan.close();
		}
	}
	
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D) g;
		g2.setColor(BACKGROUND_COLOR);
		g2.fillRect(0, 0, this.WIDTH, this.HEIGHT);
		for(int i = 0; i < 14; i++){
			for(int j = 0; j < 29; j++){
				if(map[i][j] != null){
					Point2D point = map[i][j].convertToGrid();
					if((int)point.getX() != j && (int)point.getY() != i){
						map[(int) point.getY()][(int) point.getX()] = map[i][j];
					}
					map[i][j].drawOn(g2);
				}				
			}
		}
	}
	
	public Player getPlayer(){
		for(int i = 0; i < 14; i++){
			for(int j = 0; j < 29; j++){
				if(map[i][j] instanceof Player){
					return (Player)map[i][j];
				}
			}
		}
		return null;
	}
	
	private class Repainter implements Runnable {
		private final int fps;
		
		public Repainter(int fps) {
			this.fps = fps;
		}

		@Override
		public void run() {
			try {
				while (true) {
					Thread.sleep(1000 / this.fps);
					LevelPanel.this.repaint();
				}
			} catch (InterruptedException e) {
				// nothing to do
			}
		}
	}
	
	public int getLevelNum() {
		return this.levelNum;
	}
}
