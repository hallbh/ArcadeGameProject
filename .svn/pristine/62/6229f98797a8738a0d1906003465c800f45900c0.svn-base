package GameObjects;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Area;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JComponent;


public abstract class GameObject extends JComponent implements Runnable{
	
	protected File[] sprite;
	private int spriteNum;
	private int framesPerSprite;
	private int framesShown;
	protected double x;
	protected double y;
	protected Point2D center;
	protected Rectangle.Double hitbox;
	protected int framesPerSecond;
	protected long frameTime;
	protected Area area;
	protected boolean threadRun = true;
	
	
	public GameObject(int x, int y, int framesPerSecond) {
		this.x = x;
		this.y = y;
		this.center = new Point2D.Double(this.x + 16, this.y + 16);
		this.hitbox = new Rectangle2D.Double(this.x, this.y, 32.0, 32.0);
		this.framesPerSecond = framesPerSecond;
		this.frameTime = 1000/this.framesPerSecond;
		this.area = new Area(this.hitbox);
		this.spriteNum = 1;
		this.framesPerSprite = 5;
		this.framesShown = 0;
	}
	
	public Point2D getCenterPoint(){
		return this.center;
	}
	public Rectangle2D getHitBox(){
		return this.hitbox;
	}
	
	public void stop(){
		this.threadRun = false;
	}
	
	public abstract void collide(GameObject obj);
	
	public void drawOn(Graphics2D g2){
		BufferedImage img = null;
		if(this.sprite.length == 1){
			try{
				img = ImageIO.read(this.sprite[0]);
			} catch (IOException e) {
				System.out.println("Sprite not found");
			}
			g2.drawImage(img, null, (int)this.x, (int)this.y);
			g2.setColor(Color.RED);
			g2.draw(this.hitbox);
		} else {
			try{//system in milliseconds
				img = ImageIO.read(this.sprite[this.spriteNum]);
			} catch (IOException e) {
				System.out.println("Sprite not found");
			}
			g2.drawImage(img, null, (int)this.x, (int)this.y);
			g2.setColor(Color.RED);
			g2.draw(this.hitbox);
			System.out.println("repainting player");
			if(!(this.framesShown < this.framesPerSprite)) {
				if(this.spriteNum < this.sprite.length - 1){
					this.spriteNum += 1;
				} else {
					this.spriteNum = 0;
				}
				this.framesShown = 0;
			} else {
				this.framesShown += 1;
				System.out.println(this.framesShown);
			}
		}
	}
	
	public void update(){
		this.center = new Point2D.Double(this.x + 16, this.y + 16);
		this.hitbox = new Rectangle2D.Double(this.x, this.y, 32, 32);
		this.area = new Area(this.hitbox);
	}
	/**
	 * This method converts the current center point of the object to the grid position in LevelPanel
	 * 
	 * @return Point2D x grid and y grid
	 */
	public Point2D convertToGrid(){
		int centerX = (int)this.center.getX();
		int centerY = (int)this.center.getY();
		Point2D toReturn = new Point2D.Double(centerX / 32, centerY / 32);
		return toReturn;
	}

	public abstract void collideWithBrick(Brick brick);

	public abstract void collideWithWall(Wall wall);

	public abstract void collideWithPlayer(Player player);

	public abstract void collideWithBomb(Bomb bomb);

}
